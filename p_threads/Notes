----------------------------------------------------------
What is a Thread?
----------------------------------------------------------
A thread is a single sequence stream within in a process.
Multiple strands of execution in a single program is called threads. 
Because threads have some of the properties of processes, they are sometimes called lightweight processes.

----------------------------------------------------------
What are the differences between process and thread?
-----------------------------------------------------------
Threads are not independent of one other like processes as a result threads shares with other threads their code section,
data section and OS resources like open files and signals. But, like process, 
a thread has its own program counter (PC), a register set, and a stack space.

----------------------------------
Why Multithreading?
---------------------------------
Threads are popular way to improve application through parallelism. 
For example, in a browser, multiple tabs can be different threads. MS word uses multiple threads, 
one thread to format the text, other thread to process inputs, etc.
Threads operate faster than processes due to following reasons:
1) Thread creation is much faster.
2) Context switching between threads is much faster.
3) Threads can be terminated easily
4) Communication between threads is faster.

----------------------------------------------------
THREADS CALLS
---------------------------------------------------
1- pthread_create() :- function to create a thread.
	pthread_create() takes 4 arguments.
	The first argument is a pointer to thread_id which is set by this function.
	The second argument specifies attributes. If the value is NULL, then default attributes shall be used.
	The third argument is name of function to be executed for the thread to be created.
	The fourth argument is used to pass arguments to the function, myThreadFun.

2- pthread_join() :- The pthread_join() function for threads is the equivalent of wait() for processes. 
	A call to pthread_join blocks the calling thread until the thread with identifier equal to the first argument terminates.

3- pthread_exit() :- When a thread terminates , it calls pthread_exit as a process calls exit.

--------------------------------------------------
Compiling Multhithreaded Applications
---------------------------------------------------
To compile a multithreaded program using gcc, we need to link it with the pthreads library.
Following is the command used to compile the program.

gcc multithread.c -lpthread


-----------------------------------------------------------
SEMAPHORES
-----------------------------------------------------------

Sempahores is an signalling mechanism, which allow multpile threads to access a shared resource.

1- sem_init() :- A semaphore is initialised by using sem_init(for processes or threads) or sem_open (for IPC)

	sem : Specifies the semaphore to be initialized.
	pshared : This argument specifies whether or not the newly initialized semaphore is shared between processes or between threads.
	   	  A non-zero value means the semaphore is shared between processes and a value of zero means it is shared between threads.
	value : Specifies the value to assign to the newly initialized semaphore.

2- sem_wait(sem_t *sem) :- To lock a semaphore or wait we can use the sem_wait function.

3- sem_post(sem_t *sem) :- To release or signal a semaphore, we use the sem_post function.

4- sem_destroy(sem_t *mutex) :- To destroy a semaphore, we can use sem_destroy.

Note :- To declare a semaphore, the data type is sem_t.


-------------------------------------------------------------
MUTEXS
------------------------------------------------------------

Mutex is locking mechanism ,In mutex a object owned by thread, so there is a ownership in mutex.
Mutex allows only one thread to access resource.

1- int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr) : 
	Creates a mutex, referenced by mutex, with attributes specified by attr. 
	If attr is NULL, the default mutex attribute (NONRECURSIVE) is used.

	Returned value
		If successful, pthread_mutex_init() returns 0, and the state of the mutex becomes initialized and unlocked.
		If unsuccessful, pthread_mutex_init() returns -1.


2- int pthread_mutex_lock(pthread_mutex_t *mutex) : Locks a mutex object, which identifies a mutex.
	 If the mutex is already locked by another thread, the thread waits for the mutex to become available

	Returned value
		If successful, pthread_mutex_lock() returns 0.
		If unsuccessful, pthread_mutex_lock() returns -1.

3- int pthread_mutex_unlock(pthread_mutex_t *mutex) : Releases a mutex object

	Returned value
		If successful, pthread_mutex_unlock() returns 0.
		If unsuccessful, pthread_mutex_unlock() returns -1

4- int pthread_mutex_destroy(pthread_mutex_t *mutex) : Deletes a mutex object, which identifies a mutex. 
    Mutexes are used to protect shared resources. mutex is set to an invalid value, but can be reinitialized using pthread_mutex_init().

	Returned value
		If successful, pthread_mutex_destroy() returns 0.
		If unsuccessful, pthread_mutex_destroy() returns -1.


